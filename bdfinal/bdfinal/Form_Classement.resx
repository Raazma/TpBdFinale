<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="DGV_Classement.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAQEBAAICAgADAwMABAQEAAUFBQAGBgYABwcHAAgICAAJCQkACgoKAAsLCwAMDAwADQ0NAA4O
        DgAPDw8AEBAQABISEgATExMAFBQUABUVFQAWFhYAFxcXABgYGAAZGRkAGhoaABsbGwAcHBwAHR0dAB4e
        HgAgICAAISEhACMjIwAkJCQAJSUlACYmJgAoKCgAKSkpACoqKgArKysALCwsAC0tLQAuLi4ALy8vADAw
        MAAxMTEAMjIyADMzMwA0NDQANTU1ADY2NgA3NzcAODg4ADk5OQA6OjoAPDw8AD09PQA+Pj4APz8/AEBA
        QABBQUEAQkJCAENDQwBEREQARUVFAEZGRgBHR0cASEhIAElJSQBKSkoAS0tLAE1NTQBOTk4AUFBQAFFR
        UQBSUlIAU1NTAFRUVABVVVUAVlZWAFdXVwBYWFgAWVlZAFpaWgBbW1sAXFxcAF5eXgBfX18AYGBgAGFh
        YQBiYmIAY2NjAGRkZABlZWUAZmZmAGdnZwBoaGgAaWlpAGpqagBra2sAbGxsAG1tbQBubm4Ab29vAHBw
        cABxcXEAcnJyAHNzcwB1dXUAd3d3AHh4eAB5eXkAenp6AHx8fAB9fX0Afn5+AH9/fwCAgIAAgYGBAIOD
        gwCEhIQAhYWFAIaGhgCHh4cAiYmJAIqKigCLi4sAjIyMAI6OjgCPj48AkZGRAJKSkgCUlJQAlZWVAJaW
        lgCXl5cAmJiYAJqamgCbm5sAnJycAJ2dnQCenp4An5+fAKGhoQCioqIAo6OjAKWlpQCmpqYAp6enAKio
        qACpqakAqqqqAKurqwCsrKwAra2tAK6urgCwsLAAsbGxALKysgC0tLQAtbW1ALa2tgC3t7cAuLi4ALm5
        uQC6uroAu7u7ALy8vAC9vb0Avr6+AL+/vwDAwMAAwcHBAMLCwgDDw8MAxMTEAMXFxQDGxsYAx8fHAMjI
        yADJyckAysrKAMvLywDMzMwAzc3NAM7OzgDPz88A0NDQANHR0QDS0tIA09PTANXV1QDW1tYA19fXANjY
        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
        zAcAAAAAAgEAAAIlu+Apom6hsR0RTd+jVBgSDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAA
        AIzdf1cPAAAAAAABAAAABijY1dLk6NoLAACs0cuBRQIKAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AgIAAAAsvtm4ZwAABAAABgAAAAgtzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>